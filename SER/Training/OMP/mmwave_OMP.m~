%{
OMP NMSE
%}
% make received signal
clear
% definition
times = 2;             % Monte Carlo times
M = 80;                    % training flame length 
N_s = 1;                  % data stream Ns=Lt(p2949 leftside)
sample = 1000;            % num of sample
sps = 4;                  % symbol per sample
L = 4;                    % num of paths 
N_C = 4;                  % delay taps
Ts = 1/1760*10^(-6);      % sampling period
K = 16;                   % OFDM subcarriers 16
N_t = 32;                 % num of transmitter antennas
N_r = 32;                 % num of receiver antennas
L_t = 1;                  % num of transmitter RF chain
L_r = 4;                  % num of receiver RF chain
G_t = 64;                 % grid of size for the AoA
G_r = 64;                 % grid of size for the AoD
freq = 60*10^(9);         % mm-wave freq (802.11ad says 60Ghz)
beta_r = 0.8;             % rolloff factor of RCF
var = 1;                  % variance of noise
sn_dB = -15:5:10;         % SNR roop iterate (-15,-10,-5,0,5,10)[dB]
sn_length = length(sn_dB);
power_t = 30;             % transmitter power [dBm]
s_pre = rng;              % pseudorandomly precoder
s_com = rng;              % pseudirabdinly combiner
N_Q = 2;                  % quantization bits
% make dictionary matrices
% load AR_dic and AT_dic Psi_dic from dictionary.mat
% load('dictionary.mat');
AR_dic = Array_dictionary(N_r, G_r);
AT_dic = Array_dictionary(N_t, G_t);
Psi_dic = kron(conj(AT_dic),AR_dic);

%initialize
% x_tilde_store = zeros(G_r*G_t,1,K);
% MSE_store = zeros(sn_length);
NMSE_dB_times = zeros(sn_length, times);
load("PL_factor.mat");

parfor t = 1:times
    for sn = 1 : sn_length
        %% generate transmit pilot symbols assumed QPSK system
        % symbol_tr(Lt,1,M,K)
%         symbol_tr = generate_symbol(L_t, M, K);
        symbol_tr = pskmod(unidrnd(4,K,1)-1, 4, pi/4, 'gray');
        q_tr = pskmod(unidrnd(4,N_s,M)-1, 4, pi/4, 'gray');

        %% generate channel
        [H_freq, phi_l_sn, theta_l_sn, gain_sn, PL] = generate_channel(K, N_C, N_r, N_t, sn_dB(sn), power_t, L);
        % genie aided generate channel
%         [H_freq, phi_l, theta_l, alpha, PL, T_set_genie] = genie_generate_channel(K, N_C, N_r, N_t, sn_dB(sn), power_t, L, G_r, G_t);

        %% generate precoder and combiner
        % make training vectors set, A_set = (1,N_Q)
        % make precoder F_tr(Nt,Lt,m) and combiner W_tr(Nr,Lr,m) matrix of m-th training flame
        A_set = 2*pi*(0:N_Q^2-1)/2^(N_Q);
        F_tr = generate_precoder(N_t, L_t, M, A_set, N_Q, s_pre);
        W_tr = generate_combiner(N_r, L_r, M, A_set, N_Q, s_com);

        %% generate measurement matrix Phi
        q_tr_3D = permute(q_tr, [3 1 2]);
        qF_tr = Multiplication3D(q_tr_3D,permute(F_tr, [2 1 3]));
        Phi = zeros(M*L_r, N_t*N_r);
        for m = 1 : M
            Phi((m-1)*L_r+1:m*L_r, :) = kron(qF_tr(:, :, m),W_tr(:, :, m)');
        end

        %% generate covariance matrix and sqrt of covariance matrix
        C_w_m = Multiplication3D(permute(conj(W_tr), [2 1 3]), W_tr);
        C_w = blockdiag(C_w_m);
        D_w = sqrtm(C_w);

        %% caluculate vectorized received signal
        y_k = Phi * reshape(H_freq, N_t*N_r, K) + D_w*crandn(L_r*M, K);
        y = reshape(y_k, L_r*M*K, 1);

        %% calc equivalent measure matrix Upsilon(ML_r*G_tG_r)
        Upsilon = Phi*Psi_dic;

        %% OMP phase
        % initialize
        MSE_value = 100;
        x_hat = zeros(G_r*G_t, K);
        index = zeros(L,K);

        for k = 0:K-1

            A = Upsilon;
            A_hat = zeros(size(A));
            I = eye(G_r*G_t);
%             r = y_received_vec(:, :, k+1);
            r = y_k(:, k+1);

            % OMP minimize x_hat
            % subject to |y-Ax|^2_2<eta

            for i = 1:L
                % decide index
                [~, index(i, k+1)] = max(abs(A'*r));

                % obtain column vector from measurement matrix
                A_hat(:, i) = A(:, index(i, k+1));

                % clean up matrix A
                A(:, index(i, k+1)) = 0;

                % LS
%                 x_tilde = A_hat(:, 1:i)\y_received_vec(:, :, k+1);
                x_tilde = A_hat(:, 1:i)\y_k(:, k+1);

                % apdate residual
%                 r = y_received_vec(:, :, k+1) - A_hat(:, 1:i)*x_tilde;
                r = y_k(:, k+1) - A_hat(:, 1:i)*x_tilde;
            end
            % reconstruct sparse signal
            x_hat(index(:,k+1), k+1) = x_tilde;
        end

        %% Channel Estimation phase
            H_freq_est = channel_estimation(x_hat, index, K, N_r, N_t, AR_dic, AT_dic);

        %% Calutulate NMSE    
            NMSE_dB_times(sn, t) = calc_NMSE(H_freq_est, H_freq, K, N_r, N_t);
        %     NMSE_dB(1,sn) = calc_NMSE(H_freq_est, H_freq, K, N_r, N_t)-pow2db(N_r*N_t/PL*10^(3));
        %     NMSE_dB(1,sn) = calc_NMSE(H_freq_est, H_freq, K, N_r, N_t)-mean_PL_factor;


        %     NMSE_dB_times(sn, t) = calc_NMSE(H_freq_est_2, H_freq, K, N_r, N_t)-pow2db(N_r*N_t/PL*10^(3));
        %         NMSE_dB_times(sn, t) = calc_NMSE(H_freq_est_2, H_freq, K, N_r, N_t)-mean_PL_factor;
        %     x_hat_store(:,:,:,sn) = index;
        %     MSE_value_store(sn) = MSE_value;
    end
end

NMSE_dB = (sum(NMSE_dB_times,2)/times).';

%%
% % save data
% save("result.mat", "sn_dB", "NMSE_dB");

%% plot a glaph 
% load("Theory.mat");
% figure
% grid on
% hold on
% plot(sn_dB, NMSE_dB, "b-o", "LineWidth", 2, "MarkerSize", 10)
% plot(sn_dB, NMSE_theory_OMP, "g-s", "LineWidth", 2, "MarkerSize", 10)
% 
% xlabel("SNR (dB)")
% ylabel("NMSE (dB)")
% legend(["OMP (Simu)", "OMP (Conv)"], "Location","northeast")
% title(['NMSE versus SNR (M = ', num2str(M), ')'])
% 
% figure
% plot(sn_dB, NMSE_dB, "b-o", "LineWidth", 2, "MarkerSize", 10)
% grid on
% xlabel("SNR (dB)")
% ylabel("NMSE (dB)")
% legend("OMP", "Location","northeast")
% title(['NMSE versus SNR (M = ', num2str(M), ')'])
% 